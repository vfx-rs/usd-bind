#include <pxr/usd/pcp/dynamicFileFormatDependencyData.h>
#include <pxr/base/vt/value.h>
#include <cppmm_bind.hpp>

namespace cppmm_bind {

namespace PXR_INTERNAL_NS {

namespace pxr = ::PXR_INTERNAL_NS;

/// \class PcpDynamicFileFormatDependencyData
/// 
/// Contains the necessary information for storing a prim index's dependency
/// on dynamic file format arguments and determining if a field change affects
/// the prim index. This data structure does not store the prim index or its 
/// path itself and is expected to be the data in some other data structure
/// that maps prim indexes to its dependencies.
struct PcpDynamicFileFormatDependencyData {
    using BoundType = pxr::PcpDynamicFileFormatDependencyData;

    /// Default constructor. This data will be empty.
    PcpDynamicFileFormatDependencyData();

#if 0
    /// Move constructor.
    PcpDynamicFileFormatDependencyData(pxr::PcpDynamicFileFormatDependencyData&& ) CPPMM_IGNORE;
#endif

    /// Copy constructor.
    PcpDynamicFileFormatDependencyData(const pxr::PcpDynamicFileFormatDependencyData& rhs);

#if 0
    /// Move assignment operator
    pxr::PcpDynamicFileFormatDependencyData& operator=(pxr::PcpDynamicFileFormatDependencyData&& rhs) CPPMM_IGNORE;
#endif

    /// Copy assignment operator
    pxr::PcpDynamicFileFormatDependencyData& operator=(const pxr::PcpDynamicFileFormatDependencyData& rhs);

    /// Swap the contents of this dependency data with \p rhs.
    void Swap(pxr::PcpDynamicFileFormatDependencyData& rhs);

    /// Same as Swap(), but standard name.
    void swap(pxr::PcpDynamicFileFormatDependencyData& rhs);

    /// Returns whether this dependency data is empty.
    bool IsEmpty() const;

    /// Adds dependency info from a single context that generated dynamic file
    /// format arguments (usually a payload arc in the graph).  
    /// \p dynamicFileFormat is the file format that generated the arguments.
    /// \p dependencyContextData is custom dependency information generated when
    /// the file format generated its arguments. \p composedFieldNames is a 
    /// list of the fields that were composed on the prim to generate arguments.
#if 0
    void AddDependencyContext(const pxr::PcpDynamicFileFormatInterface* dynamicFileFormat, pxr::VtValue&& dependencyContextData, pxr::TfToken::Set&& composedFieldNames);

    /// Takes all the dependency data from \p dependencyData and adds it to this
    /// dependency.
    void AppendDependencyData(pxr::PcpDynamicFileFormatDependencyData&& dependencyData);
#endif

    /// Returns a list of field names that were composed for any of the 
    /// dependency contexts that were added to this dependency.
    const pxr::TfToken::Set& GetRelevantFieldNames() const;

    /// Given a \p field name and the changed field values in \p oldAndNewValues
    /// this return whether this change can affect any of the file format 
    /// arguments generated by any of the contexts stored in this dependency.
    bool CanFieldChangeAffectFileFormatArguments(const pxr::TfToken& fieldName, const pxr::VtValue& oldValue, const pxr::VtValue& newValue) const;

    ~PcpDynamicFileFormatDependencyData();

#if 0
    struct _Data {
        using BoundType = pxr::PcpDynamicFileFormatDependencyData::_Data;

        void _AddRelevantFieldNames(pxr::TfToken::Set&& fieldNames);

        _Data(const pxr::PcpDynamicFileFormatDependencyData::_Data& );

        _Data(pxr::PcpDynamicFileFormatDependencyData::_Data&& ) CPPMM_IGNORE;

        pxr::PcpDynamicFileFormatDependencyData::_Data& operator=(const pxr::PcpDynamicFileFormatDependencyData::_Data& );

        pxr::PcpDynamicFileFormatDependencyData::_Data& operator=(pxr::PcpDynamicFileFormatDependencyData::_Data&& ) CPPMM_IGNORE;

        ~_Data();

    } CPPMM_OPAQUEPTR; // struct _Data
#endif

} CPPMM_OPAQUEPTR; // struct PcpDynamicFileFormatDependencyData


} // namespace PXR_INTERNAL_NS

} // namespace cppmm_bind
